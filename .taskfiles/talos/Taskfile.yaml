---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:

  apply-node:
    desc: Apply Talos config to a node [IP=required] [MODE=auto]
    cmd: |
      bash {{.SCRIPTS_DIR}}/render-machine-config.sh {{.TALOS_DIR}}/{{.MACHINE_TYPE}}.yaml.j2 {{.TALOS_DIR}}/nodes/{{.IP}}.yaml.j2 \
        | talosctl --nodes {{.IP}} apply-config --mode {{.MODE}} --file /dev/stdin
    vars:
      MODE: '{{.MODE | default "auto"}}'
      MACHINE_TYPE:
        sh: talosctl --nodes {{.IP}} get machinetypes --output=jsonpath='{.spec}'
    requires:
      vars: [IP]
    preconditions:
      - talosctl --nodes {{.IP}} get machineconfig
      - test -f {{.SCRIPTS_DIR}}/render-machine-config.sh
      - which talosctl

  upgrade-node:
    desc: Upgrade Talos on a single node [IP=required] [MODE=powercycle]
    cmd: talosctl --nodes {{.IP}} upgrade --image="{{.FACTORY_IMAGE}}" --reboot-mode={{.MODE}} --timeout=10m
    vars:
      MODE: '{{.MODE | default "powercycle"}}'
      FACTORY_IMAGE:
        sh: minijinja-cli {{.TALOS_DIR}}/nodes/{{.IP}}.yaml.j2 | yq --exit-status '.machine.install.image'
    requires:
      vars: [IP]
    preconditions:
      - talosctl --nodes {{.IP}} get machineconfig
      - test -f {{.TALOS_DIR}}/nodes/{{.IP}}.yaml.j2
      - which minijinja-cli talosctl yq

  upgrade-k8s:
    desc: Upgrade Kubernetes across the whole cluster
    cmd: talosctl --nodes {{.NODE}} upgrade-k8s --to $KUBERNETES_VERSION
    vars:
      NODE:
        sh: talosctl config info --output json | jq --exit-status --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl --nodes {{.NODE}} get machineconfig
      - which jq talosctl

  reboot-node:
    desc: Reboot Talos on a single node [IP=required] [MODE=powercycle]
    cmd: talosctl --nodes {{.IP}} reboot --mode={{.MODE}}
    vars:
      MODE: '{{.MODE | default "powercycle"}}'
    requires:
      vars: [IP]
    preconditions:
      - talosctl --nodes {{.IP}} get machineconfig
      - which talosctl

  shutdown-cluster:
    desc: Shutdown Talos across the whole cluster
    prompt: Shutdown the Talos cluster ... continue?
    cmd: talosctl shutdown --nodes {{.NODES}} --force
    vars:
      NODES:
        sh: talosctl config info --output json | jq --exit-status --join-output '[.nodes[]] | join(",")'
    preconditions:
      - talosctl --nodes {{.NODES}} get machineconfig
      - which jq talosctl

  reset-node:
    desc: Reset Talos on a single node [IP=required]
    prompt: Reset Talos node '{{.IP}}' ... continue?
    cmd: talosctl reset --nodes {{.IP}} --graceful=false
    requires:
      vars: [IP]
    preconditions:
      - talosctl --nodes {{.IP}} get machineconfig
      - which talosctl

  reset-cluster:
    desc: Reset Talos across the whole cluster
    prompt: Reset the Talos cluster ... continue?
    cmd: talosctl reset --nodes {{.NODES}} --graceful=false
    vars:
      NODES:
        sh: talosctl config info --output json | jq --exit-status --join-output '[.nodes[]] | join(",")'
    preconditions:
      - talosctl --nodes {{.NODES}} get machineconfig
      - which jq talosctl

  kubeconfig:
    desc: Generate the kubeconfig for a Talos cluster
    cmd: talosctl kubeconfig --nodes {{.NODE}} --force --force-context-name main {{.ROOT_DIR}}
    vars:
      NODE:
        sh: talosctl config info --output json | jq --exit-status --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl --nodes {{.NODE}} get machineconfig
      - which jq talosctl

  deploy-vm:
    desc: Deploy Talos VM to TrueNAS Scale [NAME=required] [MEMORY=4096] [VCPUS=2] [DISK_SIZE=20] [MAC_ADDRESS=optional] [BOOT_ZVOL=optional] [OPENEBS_ZVOL=optional] [ROOK_ZVOL=optional] [SKIP_ZVOL_CREATE=false] [USE_SPICE=false]
    cmd: |
      echo '{{.SCRIPTS_DIR}}/deploy-truenas-vm \
        -name "{{.NAME}}" \
        -memory {{.MEMORY}} \
        -vcpus {{.VCPUS}} \
        -disk-size {{.DISK_SIZE}} \
        -truenas-host "op://Infrastructure/talosdeploy/TRUENAS_HOST" \
        -truenas-api-key "op://Infrastructure/talosdeploy/TRUENAS_API" \
        -talos-iso "{{.TALOS_ISO}}" \
        -network-bridge "{{.NETWORK_BRIDGE}}" \
        {{if .MAC_ADDRESS}}-mac-address "{{.MAC_ADDRESS}}"{{end}} \
        {{if .BOOT_ZVOL}}-boot-zvol "{{.BOOT_ZVOL}}"{{end}} \
        {{if .OPENEBS_ZVOL}}-openebs-zvol "{{.OPENEBS_ZVOL}}"{{end}} \
        {{if .ROOK_ZVOL}}-rook-zvol "{{.ROOK_ZVOL}}"{{end}} \
        {{if .SKIP_ZVOL_CREATE}}-skip-zvol-create{{end}} \
        {{if .USE_SPICE}}-use-spice -spice-password "op://Infrastructure/talosdeploy/TRUENAS_SPICE_PASS"{{end}}' | op inject | bash
    vars:
      MEMORY: '{{.MEMORY | default "4096"}}'
      VCPUS: '{{.VCPUS | default "2"}}'
      DISK_SIZE: '{{.DISK_SIZE | default "20"}}'
      TALOS_ISO: '{{.TALOS_ISO | default "https://github.com/siderolabs/talos/releases/latest/download/metal-amd64.iso"}}'
      NETWORK_BRIDGE: '{{.NETWORK_BRIDGE | default "br0"}}'
    requires:
      vars: [NAME]
    preconditions:
      - test -f {{.SCRIPTS_DIR}}/deploy-truenas-vm
      - which op

  list-vms:
    desc: List all VMs on TrueNAS Scale
    cmd: |
      echo '{{.SCRIPTS_DIR}}/manage-truenas-vm \
        -action list \
        -truenas-host "op://Infrastructure/talosdeploy/TRUENAS_HOST" \
        -truenas-api-key "op://Infrastructure/talosdeploy/TRUENAS_API"' | op inject | bash
    preconditions:
      - test -f {{.SCRIPTS_DIR}}/manage-truenas-vm
      - which op

  start-vm:
    desc: Start a VM on TrueNAS Scale [NAME=required]
    cmd: |
      echo '{{.SCRIPTS_DIR}}/manage-truenas-vm \
        -action start \
        -name "{{.NAME}}" \
        -truenas-host "op://Infrastructure/talosdeploy/TRUENAS_HOST" \
        -truenas-api-key "op://Infrastructure/talosdeploy/TRUENAS_API"' | op inject | bash
    requires:
      vars: [NAME]
    preconditions:
      - test -f {{.SCRIPTS_DIR}}/manage-truenas-vm
      - which op

  stop-vm:
    desc: Stop a VM on TrueNAS Scale [NAME=required]
    cmd: |
      echo '{{.SCRIPTS_DIR}}/manage-truenas-vm \
        -action stop \
        -name "{{.NAME}}" \
        -truenas-host "op://Infrastructure/talosdeploy/TRUENAS_HOST" \
        -truenas-api-key "op://Infrastructure/talosdeploy/TRUENAS_API"' | op inject | bash
    requires:
      vars: [NAME]
    preconditions:
      - test -f {{.SCRIPTS_DIR}}/manage-truenas-vm
      - which op

  delete-vm:
    desc: Delete a VM on TrueNAS Scale [NAME=required]
    prompt: Delete VM '{{.NAME}}' from TrueNAS ... continue?
    cmd: |
      echo '{{.SCRIPTS_DIR}}/manage-truenas-vm \
        -action delete \
        -name "{{.NAME}}" \
        -truenas-host "op://Infrastructure/talosdeploy/TRUENAS_HOST" \
        -truenas-api-key "op://Infrastructure/talosdeploy/TRUENAS_API"' | op inject | bash
    requires:
      vars: [NAME]
    preconditions:
      - test -f {{.SCRIPTS_DIR}}/manage-truenas-vm
      - which op

  deploy-vm-with-pattern:
    desc: Deploy VM with standardized ZVol naming pattern [NAME=required] [POOL=tank] [MEMORY=4096] [VCPUS=2] [DISK_SIZE=20] [MAC_ADDRESS=optional] [USE_SPICE=false]
    cmd: |
      task talos:deploy-vm \
        NAME={{.NAME}} \
        MEMORY={{.MEMORY}} \
        VCPUS={{.VCPUS}} \
        DISK_SIZE={{.DISK_SIZE}} \
        MAC_ADDRESS={{.MAC_ADDRESS}} \
        BOOT_ZVOL={{.POOL}}/vms/{{.NAME}}-boot \
        OPENEBS_ZVOL={{.POOL}}/vms/{{.NAME}}-openebs \
        ROOK_ZVOL={{.POOL}}/vms/{{.NAME}}-rook \
        SKIP_ZVOL_CREATE={{.SKIP_ZVOL_CREATE}} \
        USE_SPICE={{.USE_SPICE}}
    vars:
      POOL: '{{.POOL | default "tank"}}'
      MEMORY: '{{.MEMORY | default "4096"}}'
      VCPUS: '{{.VCPUS | default "2"}}'
      DISK_SIZE: '{{.DISK_SIZE | default "20"}}'
      SKIP_ZVOL_CREATE: '{{.SKIP_ZVOL_CREATE | default "true"}}'
    requires:
      vars: [NAME]

  show-zvol-pattern:
    desc: Show ZVol naming pattern for a VM [NAME=required] [POOL=tank]
    cmd: |
      echo "ZVol naming pattern for VM: {{.NAME}}"
      echo "Pool: {{.POOL}}"
      echo ""
      echo "Boot disk:    {{.POOL}}/vms/{{.NAME}}-boot"
      echo "OpenEBS disk: {{.POOL}}/vms/{{.NAME}}-openebs"
      echo "Rook disk:    {{.POOL}}/vms/{{.NAME}}-rook"
      echo ""
      echo "Device paths:"
      echo "Boot disk:    /dev/zvol/{{.POOL}}/vms/{{.NAME}}-boot"
      echo "OpenEBS disk: /dev/zvol/{{.POOL}}/vms/{{.NAME}}-openebs"
      echo "Rook disk:    /dev/zvol/{{.POOL}}/vms/{{.NAME}}-rook"
    vars:
      POOL: '{{.POOL | default "tank"}}'
    requires:
      vars: [NAME]
