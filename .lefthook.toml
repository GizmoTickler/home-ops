[pre-commit]
parallel = true

[pre-commit.commands.format-yaml]
run = "yamlfmt {staged_files}"
glob = ["*.yaml", "*.yml"]
exclude = ["*.sops.yaml"]
stage_fixed = true

[pre-commit.commands.go-fmt]
run = "gofmt -l -w {staged_files} && go mod tidy"
root = "cmd/homeops-cli/"
glob = ["*.go"]
stage_fixed = true

[pre-commit.commands.go-lint]
run = """
if command -v golangci-lint >/dev/null 2>&1; then
    golangci-lint run --fix {staged_files}
else
    echo "‚ö†Ô∏è  golangci-lint not found, running go vet instead"
    go vet ./...
fi
"""
root = "cmd/homeops-cli/"
glob = ["*.go"]
stage_fixed = true

[pre-commit.commands.kustomize-validate]
run = """
if command -v kustomize >/dev/null 2>&1; then
    echo "Validating kustomization in {file_dir}"
    kustomize build {file_dir} --dry-run > /dev/null
else
    echo "‚ö†Ô∏è  kustomize not found, skipping validation"
fi
"""
glob = ["**/kustomization.yaml"]

[pre-commit.commands.sops-validate]
run = """
if command -v sops >/dev/null 2>&1; then
    echo "Validating SOPS file: {staged_files}"
    sops --decrypt {staged_files} > /dev/null
else
    echo "‚ö†Ô∏è  sops not found, skipping SOPS validation"
fi
"""
glob = ["**/*.sops.yaml"]

[pre-push]
parallel = false

[pre-push.commands.go-test]
run = """
if [ -f "Makefile" ]; then
    make test
else
    go test -v ./...
fi
"""
root = "cmd/homeops-cli/"

[pre-push.commands.go-build]
run = """
if [ -f "Makefile" ]; then
    make build
else
    go build -o homeops-cli
fi
"""
root = "cmd/homeops-cli/"

[pre-push.commands.flux-validate]
run = """
if command -v kustomize >/dev/null 2>&1; then
    echo "üîç Validating all Kubernetes applications..."
    find kubernetes/apps -name "kustomization.yaml" -exec dirname {} \\; | while read dir; do
        echo "Validating $dir"
        kustomize build "$dir" --dry-run > /dev/null || {
            echo "‚ùå Failed to validate $dir"
            exit 1
        }
    done
    echo "‚úÖ All Kubernetes applications validated"
else
    echo "‚ö†Ô∏è  kustomize not found, skipping Flux validation"
fi
"""

[commit-msg]

[commit-msg.commands.conventional-commit]
run = """
commit_regex='^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\\(.+\\))?: .{1,50}'
if ! grep -qE "$commit_regex" "{0}"; then
    echo "‚ùå Invalid commit message format!"
    echo "Format: type(scope): description"
    echo "Types: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert"
    echo "Example: feat(k8s): add monitoring dashboard"
    exit 1
fi
"""

[skip_output]
meta = true
summary = true
